{"version":3,"file":"warnDeprecations.js","sourceRoot":"../src/","sources":["warn/warnDeprecations.ts"],"names":[],"mappings":";;;;IAGA;;;;;;;;OAQG;IACH,SAAgB,gBAAgB,CAAe,aAAqB,EAAE,KAAQ,EAAE,cAA+B;QAC7G,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAC1C,KAAK,IAAM,QAAQ,IAAI,cAAc,EAAE,CAAC;gBACtC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE,CAAC;oBAC/B,IAAI,kBAAkB,GAAG,UAAG,aAAa,wBAAc,QAAQ,wCAAqC,CAAC;oBACrG,IAAM,mBAAmB,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;oBACrD,IAAI,mBAAmB,EAAE,CAAC;wBACxB,kBAAkB,IAAI,gBAAS,mBAAmB,eAAY,CAAC;oBACjE,CAAC;oBACD,IAAA,WAAI,EAAC,kBAAkB,CAAC,CAAC;gBAC3B,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAbD,4CAaC","sourcesContent":["import { warn } from './warn';\nimport type { ISettingsMap } from './warn';\n\n/**\n * Warns when a deprecated props are being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\n * either null or a replacement prop name.\n */\nexport function warnDeprecations<P extends {}>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in deprecationMap) {\n      if (props && propName in props) {\n        let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\n        const replacementPropName = deprecationMap[propName];\n        if (replacementPropName) {\n          deprecationMessage += ` Use '${replacementPropName}' instead.`;\n        }\n        warn(deprecationMessage);\n      }\n    }\n  }\n}\n"]}
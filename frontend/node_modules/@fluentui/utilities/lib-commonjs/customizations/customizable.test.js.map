{"version":3,"file":"customizable.test.js","sourceRoot":"../src/","sources":["customizations/customizable.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/*  eslint-disable @typescript-eslint/no-deprecated */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/server';\nimport { mount } from 'enzyme';\nimport { customizable } from './customizable';\nimport { Customizations } from './Customizations';\nimport { Customizer } from './Customizer';\nimport type { IStyle, IStyleFunction, ShadowConfig } from '@fluentui/merge-styles';\n\n@customizable('Foo', ['field'])\nclass Foo extends React.Component<{ field?: string }, {}> {\n  public render(): JSX.Element {\n    return <div>{this.props.field}</div>;\n  }\n}\n\ninterface IComponentStyles {\n  root: IStyle;\n  __shadowConfig__?: ShadowConfig;\n}\n\ninterface IComponentProps {\n  styles: IComponentStyles;\n}\n\ninterface IComponentStyleFunctionProps {\n  styles: IStyleFunction<IComponentProps, IComponentStyles>;\n}\n\n@customizable('ConcatStyles', ['styles'], true)\nclass ConcatStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return <div />;\n  }\n}\n\n@customizable('OverrideStyles', ['styles'])\nclass OverrideStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return <div />;\n  }\n}\n\n@customizable('StyleFunction', ['styles'])\nclass StyleFunction extends React.Component<IComponentStyleFunctionProps> {\n  public render(): JSX.Element {\n    return <div />;\n  }\n}\n\ndescribe('customizable', () => {\n  beforeEach(() => {\n    Customizations.reset();\n  });\n\n  it('can receive global customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can receive scoped customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>scopedName</div>');\n  });\n\n  it('can ignore scoped customizations that do not apply', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Bar', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can accept props over global/scoped values', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo field=\"name\" />)).toEqual('<div>name</div>');\n  });\n\n  it('can concatenate global styles and component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual([globalStyles, componentStyles]);\n  });\n\n  it('can concatenate global styles and component styles', () => {\n    const globalStyles: IStyleFunction<IComponentProps, IComponentStyles> = _props => {\n      return { root: { color: 'red', background: 'green' } };\n    };\n    const componentStyles = { root: { color: 'blue' } };\n\n    Customizations.applySettings({ styles: globalStyles });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n\n    const component = wrapper.find('ConcatStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual([globalStyles({} as IComponentProps).root, componentStyles.root]);\n  });\n\n  it('will apply component style function when no global styles are present', () => {\n    const componentStyles: IStyleFunction<IComponentProps, IComponentStyles> = _props => {\n      return { root: { color: 'red', background: 'green' } };\n    };\n\n    const wrapper = mount(\n      <Customizer>\n        <StyleFunction styles={componentStyles} />\n      </Customizer>,\n    );\n\n    const component = wrapper.find('StyleFunction');\n    const props = component.props() as IComponentProps;\n    expect(typeof props.styles).toBe('function');\n    expect(props.styles.__shadowConfig__).toBeTruthy();\n  });\n\n  it('can concatenate scoped styles and component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('ConcatStyles', { styles: { root: scopedStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual([scopedStyles, componentStyles]);\n  });\n\n  it('can override global styles with component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('OverrideStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual(componentStyles);\n  });\n\n  it('can override scoped styles with component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('OverrideStyles', { styles: { root: scopedStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('OverrideStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual(componentStyles);\n  });\n\n  it('should not mutate styles if no change to component and global styles', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);\n\n    wrapper.setProps({});\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(finalStylesAfterRerender).toBe(finalStyles);\n    expect(finalStylesAfterRerender).toEqual(finalStyles);\n  });\n\n  it('should not mutate styles if no change to component styles without global styles', () => {\n    const componentStyles = { root: { color: 'blue' } };\n\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual(componentStyles.root);\n\n    wrapper.setProps({});\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(finalStylesAfterRerender).toStrictEqual(finalStyles);\n    expect(finalStylesAfterRerender).toEqual(finalStyles);\n  });\n\n  it('should update styles if component styles changed', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);\n\n    const newComponentRootStyles = { color: 'red' };\n    const newComponentStyles = { root: newComponentRootStyles };\n\n    // re-render ConcatStyles with new styles\n    wrapper.setProps({\n      children: React.cloneElement(wrapper.props().children, { styles: newComponentStyles }),\n    });\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(Object.keys(finalStylesAfterRerender)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStylesAfterRerender.root).toEqual([globalRootStyles, newComponentRootStyles]);\n  });\n});\n"]}
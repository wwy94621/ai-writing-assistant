{"version":3,"file":"GroupedListUtility.js","sourceRoot":"../src/","sources":["utilities/groupedList/GroupedListUtility.tsx"],"names":[],"mappings":";;;;IAEA;;;OAGG;IACI,IAAM,aAAa,GAAG,UAAC,MAA4B;QACxD,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,MAAM,EAAE,CAAC;YACX,IAAM,eAAe,6BAAO,MAAM,OAAC,CAAC;YACpC,IAAI,YAAY,SAAQ,CAAC;YAEzB,OAAO,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACrD,EAAE,KAAK,CAAC;gBAER,YAAY,GAAG,eAAe,CAAC,GAAG,EAAY,CAAC;gBAE/C,IAAI,YAAY,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAC1C,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,YAAY,CAAC,QAAQ,EAAE;gBACjD,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IAnBW,QAAA,aAAa,iBAmBxB","sourcesContent":["import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n"]}